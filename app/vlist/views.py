from flask import Blueprint, render_template, request, redirect, url_for, session, current_app
from .models import db, Item, User
import os
from werkzeug.utils import secure_filename
import uuid

vlist_bp = Blueprint('vlist', __name__, template_folder='templates')

ALLOWED_EXTENSIONS = {"png", "jpg", "jpeg", "gif"}


def allowed_file(filename):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


# üîπ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π guest_id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
@vlist_bp.before_app_request
def ensure_guest_id():
    if "guest_id" not in session:
        session["guest_id"] = str(uuid.uuid4())


# üîπ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–∞—Ä–∫–æ–≤
@vlist_bp.route('/')
def index():
    items = Item.query.all()
    is_admin = session.get("is_admin", False)
    guest_id = session.get("guest_id")
    return render_template('vlist.html', items=items, is_admin=is_admin, guest_id=guest_id)


# üîπ –≤—Ö–æ–¥ –∞–¥–º–∏–Ω–∞
@vlist_bp.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get("username")
        password = request.form.get("password")

        user = User.query.filter_by(username=username).first()
        if user and user.check_password(password):
            session["is_admin"] = True
            return redirect(url_for('vlist.index'))
        return "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", 403
    return render_template("login.html")


# üîπ –≤—ã—Ö–æ–¥ –∞–¥–º–∏–Ω–∞
@vlist_bp.route('/logout')
def logout():
    session.pop("is_admin", None)
    return redirect(url_for('vlist.index'))


# üîπ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
@vlist_bp.route('/add', methods=['POST'])
def add_item():
    if not session.get("is_admin"):
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", 403

    title = request.form.get("title")
    description = request.form.get("description")
    image_file = request.files.get("image")

    filename = None
    if image_file and allowed_file(image_file.filename):
        filename = secure_filename(image_file.filename)

        # –ø–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ—Ä—ë—Ç—Å—è –∏–∑ config
        upload_folder = current_app.config['UPLOAD_FOLDER']
        os.makedirs(upload_folder, exist_ok=True)

        save_path = os.path.join(upload_folder, filename)
        image_file.save(save_path)

    if title:
        item = Item(title=title, description=description, image=filename)
        db.session.add(item)
        db.session.commit()

    return redirect(url_for('vlist.index'))


# üîπ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫
@vlist_bp.route('/reserve/<int:item_id>', methods=['POST'])
def reserve(item_id):
    item = Item.query.get_or_404(item_id)
    if item.reserved_by:
        return "–≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω", 400

    item.reserved_by = session["guest_id"]
    db.session.commit()
    return redirect(url_for('vlist.index'))


# üîπ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å (—Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª)
@vlist_bp.route('/unreserve/<int:item_id>', methods=['POST'])
def unreserve(item_id):
    item = Item.query.get_or_404(item_id)

    if item.reserved_by != session.get("guest_id"):
        return "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –±—Ä–æ–Ω—å", 403

    item.reserved_by = None
    db.session.commit()
    return redirect(url_for('vlist.index'))


# üîπ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
@vlist_bp.route('/delete/<int:item_id>', methods=['POST'])
def delete_item(item_id):
    if not session.get("is_admin"):
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", 403

    item = Item.query.get_or_404(item_id)

    # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –¥–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if item.image:
        image_path = os.path.join(current_app.config['UPLOAD_FOLDER'], item.image)
        if os.path.exists(image_path):
            os.remove(image_path)

    db.session.delete(item)
    db.session.commit()
    return redirect(url_for('vlist.index'))
